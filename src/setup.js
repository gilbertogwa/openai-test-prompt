#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise(resolve => {
    rl.question(prompt, resolve);
  });
}

async function setup() {
  console.log('üöÄ Setup do Framework de Testes LLM\n');

  const envPath = path.join(__dirname, '../.env');

  // Verifica se .env j√° existe
  if (fs.existsSync(envPath)) {
    console.log('üìÅ Arquivo .env j√° existe.');
    const overwrite = await question('Deseja sobrescrever? (s/N): ');
    
    if (overwrite.toLowerCase() !== 's' && overwrite.toLowerCase() !== 'sim') {
      console.log('‚úÖ Mantendo configura√ß√£o existente.');
      rl.close();
      return;
    }
  }

  console.log('\nüîë Configura√ß√£o da API');
  console.log('Para usar o OpenAI GPT, voc√™ precisa de uma chave de API.');
  console.log('Voc√™ pode obt√™-la em: https://platform.openai.com/api-keys\n');

  const apiUrl = await question('URL da API [https://api.openai.com/v1/chat/completions]: ') || 'https://api.openai.com/v1/chat/completions';
  const bearerToken = await question('Bearer Token (sk-...): ');

  if (!bearerToken) {
    console.log('‚ùå Bearer Token √© obrigat√≥rio!');
    rl.close();
    return;
  }

  console.log('\n‚öôÔ∏è  Configura√ß√µes opcionais (pressione Enter para usar padr√£o)');
  const timeout = await question('Timeout em ms [30000]: ') || '30000';
  const retryAttempts = await question('Tentativas de retry [3]: ') || '3';
  const logLevel = await question('Log level (info/debug/error) [info]: ') || 'info';
  const generateHtml = await question('Gerar relat√≥rio HTML? (s/N) [N]: ') || 'N';
  const parallelTests = await question('Testes em paralelo [1]: ') || '1';

  // Cria o conte√∫do do arquivo .env
  const envContent = `# =============================================================================
# CONFIGURA√á√ïES DA API
# =============================================================================
# OBRIGAT√ìRIAS: Configure estas vari√°veis para conectar com a API do LLM
API_URL=${apiUrl}
BEARER_TOKEN=${bearerToken}

# =============================================================================
# CONFIGURA√á√ïES DE EXECU√á√ÉO
# =============================================================================
TIMEOUT=${timeout}
RETRY_ATTEMPTS=${retryAttempts}
RETRY_DELAY=1000
PARALLEL_TESTS=${parallelTests}
REQUEST_DELAY=500

# =============================================================================
# CONFIGURA√á√ïES DE LOGGING
# =============================================================================
LOG_LEVEL=${logLevel}
LOG_TOKENS=true
VERBOSE_MODE=false
SAVE_LOGS=true

# =============================================================================
# CONFIGURA√á√ïES DE RELAT√ìRIOS
# =============================================================================
GENERATE_HTML_REPORT=${generateHtml.toLowerCase() === 's' ? 'true' : 'false'}
SAVE_JSON_REPORT=true
REPORTS_DIR=reports`;

  // Salva a configura√ß√£o
  fs.writeFileSync(envPath, envContent);

  console.log('\n‚úÖ Configura√ß√£o salva com sucesso!');
  console.log(`üìÅ Arquivo criado: ${envPath}`);
  
  console.log('\nüîí IMPORTANTE - Seguran√ßa:');
  console.log('- O arquivo .env foi adicionado ao .gitignore');
  console.log('- Sua chave de API N√ÉO ser√° commitada no reposit√≥rio Git');
  console.log('- Em produ√ß√£o, use vari√°veis de ambiente do sistema');

  console.log('\nüéØ Pr√≥ximos passos:');
  console.log('1. Execute: npm run test');
  console.log('2. Crie seus pr√≥prios testes em: tests/');
  console.log('3. Execute: npm run validate para verificar sintaxe dos testes');
  console.log('4. Consulte docs/ para documenta√ß√£o completa');

  rl.close();
}

setup().catch(console.error);
